// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "environment_manager.proto" (package "environment_manager", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message environment_manager.Project
 */
export interface Project {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
}
/**
 * @generated from protobuf message environment_manager.Environment
 */
export interface Environment {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: environment_manager.Environment.Kind kind = 3;
     */
    kind: Environment_Kind;
}
/**
 * @generated from protobuf enum environment_manager.Environment.Kind
 */
export enum Environment_Kind {
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: DEVELOPMENT = 1;
     */
    DEVELOPMENT = 1,
    /**
     * @generated from protobuf enum value: STAGING = 2;
     */
    STAGING = 2,
    /**
     * @generated from protobuf enum value: PRODUCTION = 3;
     */
    PRODUCTION = 3
}
/**
 * @generated from protobuf message environment_manager.Variable
 */
export interface Variable {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * project
 *
 * @generated from protobuf message environment_manager.CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * @generated from protobuf field: environment_manager.Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message environment_manager.CreateProjectResponse
 */
export interface CreateProjectResponse {
    /**
     * @generated from protobuf field: environment_manager.Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message environment_manager.GetOneProjectRequest
 */
export interface GetOneProjectRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message environment_manager.GetOneProjectResponse
 */
export interface GetOneProjectResponse {
    /**
     * @generated from protobuf field: environment_manager.Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message environment_manager.GetAllProjectsRequest
 */
export interface GetAllProjectsRequest {
}
/**
 * @generated from protobuf message environment_manager.GetAllProjectsResponse
 */
export interface GetAllProjectsResponse {
    /**
     * @generated from protobuf field: repeated environment_manager.Project projects = 1;
     */
    projects: Project[];
}
/**
 * @generated from protobuf message environment_manager.UpdateProjectRequest
 */
export interface UpdateProjectRequest {
    /**
     * @generated from protobuf field: environment_manager.Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message environment_manager.UpdateProjectResponse
 */
export interface UpdateProjectResponse {
    /**
     * @generated from protobuf field: environment_manager.Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message environment_manager.DeleteProjectRequest
 */
export interface DeleteProjectRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message environment_manager.DeleteProjectResponse
 */
export interface DeleteProjectResponse {
}
/**
 * environment
 *
 * @generated from protobuf message environment_manager.CreateEnvironmentRequest
 */
export interface CreateEnvironmentRequest {
    /**
     * @generated from protobuf field: environment_manager.Environment Environment = 1 [json_name = "Environment"];
     */
    environment?: Environment;
}
/**
 * @generated from protobuf message environment_manager.CreateEnvironmentResponse
 */
export interface CreateEnvironmentResponse {
    /**
     * @generated from protobuf field: environment_manager.Environment environment = 1;
     */
    environment?: Environment;
}
/**
 * @generated from protobuf message environment_manager.GetOneEnvironmentRequest
 */
export interface GetOneEnvironmentRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message environment_manager.GetOneEnvironmentResponse
 */
export interface GetOneEnvironmentResponse {
    /**
     * @generated from protobuf field: environment_manager.Environment environment = 1;
     */
    environment?: Environment;
}
/**
 * @generated from protobuf message environment_manager.GetAllEnvironmentsRequest
 */
export interface GetAllEnvironmentsRequest {
    /**
     * @generated from protobuf field: string project_id = 1;
     */
    projectId: string;
}
/**
 * @generated from protobuf message environment_manager.GetAllEnvironmentsResponse
 */
export interface GetAllEnvironmentsResponse {
    /**
     * @generated from protobuf field: repeated environment_manager.Environment environments = 1;
     */
    environments: Environment[];
}
/**
 * @generated from protobuf message environment_manager.UpdateEnvironmentRequest
 */
export interface UpdateEnvironmentRequest {
    /**
     * @generated from protobuf field: environment_manager.Environment environment = 1;
     */
    environment?: Environment;
}
/**
 * @generated from protobuf message environment_manager.UpdateEnvironmentResponse
 */
export interface UpdateEnvironmentResponse {
    /**
     * @generated from protobuf field: environment_manager.Environment environment = 1;
     */
    environment?: Environment;
}
/**
 * @generated from protobuf message environment_manager.DeleteEnvironmentRequest
 */
export interface DeleteEnvironmentRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message environment_manager.DeleteEnvironmentResponse
 */
export interface DeleteEnvironmentResponse {
}
/**
 * variable
 *
 * @generated from protobuf message environment_manager.CreateVariableRequest
 */
export interface CreateVariableRequest {
    /**
     * @generated from protobuf field: environment_manager.Variable variable = 1;
     */
    variable?: Variable;
}
/**
 * @generated from protobuf message environment_manager.CreateVariableResponse
 */
export interface CreateVariableResponse {
    /**
     * @generated from protobuf field: environment_manager.Variable variable = 1;
     */
    variable?: Variable;
}
/**
 * @generated from protobuf message environment_manager.GetOneVariableRequest
 */
export interface GetOneVariableRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message environment_manager.GetOneVariableResponse
 */
export interface GetOneVariableResponse {
    /**
     * @generated from protobuf field: environment_manager.Variable variable = 1;
     */
    variable?: Variable;
}
/**
 * @generated from protobuf message environment_manager.QueryVariablesRequest
 */
export interface QueryVariablesRequest {
    /**
     * @generated from protobuf field: string project_id = 1;
     */
    projectId: string;
    /**
     * @generated from protobuf oneof: query
     */
    query: {
        oneofKind: "environmentKind";
        /**
         * @generated from protobuf field: environment_manager.Environment.Kind environment_kind = 2;
         */
        environmentKind: Environment_Kind;
    } | {
        oneofKind: "environmentId";
        /**
         * @generated from protobuf field: string environment_id = 3;
         */
        environmentId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message environment_manager.QueryVariablesResponse
 */
export interface QueryVariablesResponse {
    /**
     * @generated from protobuf field: repeated environment_manager.Variable variables = 1;
     */
    variables: Variable[];
}
/**
 * @generated from protobuf message environment_manager.UpdateVariableRequest
 */
export interface UpdateVariableRequest {
    /**
     * @generated from protobuf field: environment_manager.Variable variable = 1;
     */
    variable?: Variable;
}
/**
 * @generated from protobuf message environment_manager.UpdateVariableResponse
 */
export interface UpdateVariableResponse {
    /**
     * @generated from protobuf field: environment_manager.Variable variable = 1;
     */
    variable?: Variable;
}
/**
 * @generated from protobuf message environment_manager.UpdateManyVariablesRequest
 */
export interface UpdateManyVariablesRequest {
    /**
     * @generated from protobuf field: repeated environment_manager.Variable variable = 1;
     */
    variable: Variable[];
}
/**
 * @generated from protobuf message environment_manager.UpdateManyVariablesResponse
 */
export interface UpdateManyVariablesResponse {
    /**
     * @generated from protobuf field: repeated environment_manager.Variable variable = 1;
     */
    variable: Variable[];
}
/**
 * @generated from protobuf message environment_manager.DeleteVariableRequest
 */
export interface DeleteVariableRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message environment_manager.DeleteVariableResponse
 */
export interface DeleteVariableResponse {
}
/**
 * @generated from protobuf message environment_manager.DeleteManyVariablesRequest
 */
export interface DeleteManyVariablesRequest {
    /**
     * @generated from protobuf field: repeated string ids = 1;
     */
    ids: string[];
}
/**
 * @generated from protobuf message environment_manager.DeleteManyVariablesResponse
 */
export interface DeleteManyVariablesResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class Project$Type extends MessageType<Project> {
    constructor() {
        super("environment_manager.Project", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Project>): Project {
        const message = { id: "", displayName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Project>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Project): Project {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Project, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.Project
 */
export const Project = new Project$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Environment$Type extends MessageType<Environment> {
    constructor() {
        super("environment_manager.Environment", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kind", kind: "enum", T: () => ["environment_manager.Environment.Kind", Environment_Kind] }
        ]);
    }
    create(value?: PartialMessage<Environment>): Environment {
        const message = { id: "", name: "", kind: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Environment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Environment): Environment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* environment_manager.Environment.Kind kind */ 3:
                    message.kind = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Environment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* environment_manager.Environment.Kind kind = 3; */
        if (message.kind !== 0)
            writer.tag(3, WireType.Varint).int32(message.kind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.Environment
 */
export const Environment = new Environment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Variable$Type extends MessageType<Variable> {
    constructor() {
        super("environment_manager.Variable", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Variable>): Variable {
        const message = { id: "", key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Variable>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Variable): Variable {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Variable, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.Variable
 */
export const Variable = new Variable$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectRequest$Type extends MessageType<CreateProjectRequest> {
    constructor() {
        super("environment_manager.CreateProjectRequest", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<CreateProjectRequest>): CreateProjectRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectRequest): CreateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.CreateProjectRequest
 */
export const CreateProjectRequest = new CreateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectResponse$Type extends MessageType<CreateProjectResponse> {
    constructor() {
        super("environment_manager.CreateProjectResponse", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<CreateProjectResponse>): CreateProjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectResponse): CreateProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.CreateProjectResponse
 */
export const CreateProjectResponse = new CreateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOneProjectRequest$Type extends MessageType<GetOneProjectRequest> {
    constructor() {
        super("environment_manager.GetOneProjectRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOneProjectRequest>): GetOneProjectRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOneProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneProjectRequest): GetOneProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetOneProjectRequest
 */
export const GetOneProjectRequest = new GetOneProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOneProjectResponse$Type extends MessageType<GetOneProjectResponse> {
    constructor() {
        super("environment_manager.GetOneProjectResponse", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<GetOneProjectResponse>): GetOneProjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOneProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneProjectResponse): GetOneProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetOneProjectResponse
 */
export const GetOneProjectResponse = new GetOneProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllProjectsRequest$Type extends MessageType<GetAllProjectsRequest> {
    constructor() {
        super("environment_manager.GetAllProjectsRequest", []);
    }
    create(value?: PartialMessage<GetAllProjectsRequest>): GetAllProjectsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllProjectsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllProjectsRequest): GetAllProjectsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllProjectsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetAllProjectsRequest
 */
export const GetAllProjectsRequest = new GetAllProjectsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllProjectsResponse$Type extends MessageType<GetAllProjectsResponse> {
    constructor() {
        super("environment_manager.GetAllProjectsResponse", [
            { no: 1, name: "projects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Project }
        ]);
    }
    create(value?: PartialMessage<GetAllProjectsResponse>): GetAllProjectsResponse {
        const message = { projects: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllProjectsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllProjectsResponse): GetAllProjectsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated environment_manager.Project projects */ 1:
                    message.projects.push(Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllProjectsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated environment_manager.Project projects = 1; */
        for (let i = 0; i < message.projects.length; i++)
            Project.internalBinaryWrite(message.projects[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetAllProjectsResponse
 */
export const GetAllProjectsResponse = new GetAllProjectsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectRequest$Type extends MessageType<UpdateProjectRequest> {
    constructor() {
        super("environment_manager.UpdateProjectRequest", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<UpdateProjectRequest>): UpdateProjectRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectRequest): UpdateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateProjectRequest
 */
export const UpdateProjectRequest = new UpdateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectResponse$Type extends MessageType<UpdateProjectResponse> {
    constructor() {
        super("environment_manager.UpdateProjectResponse", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<UpdateProjectResponse>): UpdateProjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectResponse): UpdateProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateProjectResponse
 */
export const UpdateProjectResponse = new UpdateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectRequest$Type extends MessageType<DeleteProjectRequest> {
    constructor() {
        super("environment_manager.DeleteProjectRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteProjectRequest>): DeleteProjectRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectRequest): DeleteProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteProjectRequest
 */
export const DeleteProjectRequest = new DeleteProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectResponse$Type extends MessageType<DeleteProjectResponse> {
    constructor() {
        super("environment_manager.DeleteProjectResponse", []);
    }
    create(value?: PartialMessage<DeleteProjectResponse>): DeleteProjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectResponse): DeleteProjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteProjectResponse
 */
export const DeleteProjectResponse = new DeleteProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEnvironmentRequest$Type extends MessageType<CreateEnvironmentRequest> {
    constructor() {
        super("environment_manager.CreateEnvironmentRequest", [
            { no: 1, name: "Environment", kind: "message", jsonName: "Environment", T: () => Environment }
        ]);
    }
    create(value?: PartialMessage<CreateEnvironmentRequest>): CreateEnvironmentRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateEnvironmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEnvironmentRequest): CreateEnvironmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Environment Environment = 1 [json_name = "Environment"];*/ 1:
                    message.environment = Environment.internalBinaryRead(reader, reader.uint32(), options, message.environment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEnvironmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Environment Environment = 1 [json_name = "Environment"]; */
        if (message.environment)
            Environment.internalBinaryWrite(message.environment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.CreateEnvironmentRequest
 */
export const CreateEnvironmentRequest = new CreateEnvironmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEnvironmentResponse$Type extends MessageType<CreateEnvironmentResponse> {
    constructor() {
        super("environment_manager.CreateEnvironmentResponse", [
            { no: 1, name: "environment", kind: "message", T: () => Environment }
        ]);
    }
    create(value?: PartialMessage<CreateEnvironmentResponse>): CreateEnvironmentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateEnvironmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEnvironmentResponse): CreateEnvironmentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Environment environment */ 1:
                    message.environment = Environment.internalBinaryRead(reader, reader.uint32(), options, message.environment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEnvironmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Environment environment = 1; */
        if (message.environment)
            Environment.internalBinaryWrite(message.environment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.CreateEnvironmentResponse
 */
export const CreateEnvironmentResponse = new CreateEnvironmentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOneEnvironmentRequest$Type extends MessageType<GetOneEnvironmentRequest> {
    constructor() {
        super("environment_manager.GetOneEnvironmentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOneEnvironmentRequest>): GetOneEnvironmentRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOneEnvironmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneEnvironmentRequest): GetOneEnvironmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneEnvironmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetOneEnvironmentRequest
 */
export const GetOneEnvironmentRequest = new GetOneEnvironmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOneEnvironmentResponse$Type extends MessageType<GetOneEnvironmentResponse> {
    constructor() {
        super("environment_manager.GetOneEnvironmentResponse", [
            { no: 1, name: "environment", kind: "message", T: () => Environment }
        ]);
    }
    create(value?: PartialMessage<GetOneEnvironmentResponse>): GetOneEnvironmentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOneEnvironmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneEnvironmentResponse): GetOneEnvironmentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Environment environment */ 1:
                    message.environment = Environment.internalBinaryRead(reader, reader.uint32(), options, message.environment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneEnvironmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Environment environment = 1; */
        if (message.environment)
            Environment.internalBinaryWrite(message.environment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetOneEnvironmentResponse
 */
export const GetOneEnvironmentResponse = new GetOneEnvironmentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllEnvironmentsRequest$Type extends MessageType<GetAllEnvironmentsRequest> {
    constructor() {
        super("environment_manager.GetAllEnvironmentsRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllEnvironmentsRequest>): GetAllEnvironmentsRequest {
        const message = { projectId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllEnvironmentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllEnvironmentsRequest): GetAllEnvironmentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllEnvironmentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetAllEnvironmentsRequest
 */
export const GetAllEnvironmentsRequest = new GetAllEnvironmentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllEnvironmentsResponse$Type extends MessageType<GetAllEnvironmentsResponse> {
    constructor() {
        super("environment_manager.GetAllEnvironmentsResponse", [
            { no: 1, name: "environments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Environment }
        ]);
    }
    create(value?: PartialMessage<GetAllEnvironmentsResponse>): GetAllEnvironmentsResponse {
        const message = { environments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllEnvironmentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllEnvironmentsResponse): GetAllEnvironmentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated environment_manager.Environment environments */ 1:
                    message.environments.push(Environment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllEnvironmentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated environment_manager.Environment environments = 1; */
        for (let i = 0; i < message.environments.length; i++)
            Environment.internalBinaryWrite(message.environments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetAllEnvironmentsResponse
 */
export const GetAllEnvironmentsResponse = new GetAllEnvironmentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateEnvironmentRequest$Type extends MessageType<UpdateEnvironmentRequest> {
    constructor() {
        super("environment_manager.UpdateEnvironmentRequest", [
            { no: 1, name: "environment", kind: "message", T: () => Environment }
        ]);
    }
    create(value?: PartialMessage<UpdateEnvironmentRequest>): UpdateEnvironmentRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateEnvironmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEnvironmentRequest): UpdateEnvironmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Environment environment */ 1:
                    message.environment = Environment.internalBinaryRead(reader, reader.uint32(), options, message.environment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateEnvironmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Environment environment = 1; */
        if (message.environment)
            Environment.internalBinaryWrite(message.environment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateEnvironmentRequest
 */
export const UpdateEnvironmentRequest = new UpdateEnvironmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateEnvironmentResponse$Type extends MessageType<UpdateEnvironmentResponse> {
    constructor() {
        super("environment_manager.UpdateEnvironmentResponse", [
            { no: 1, name: "environment", kind: "message", T: () => Environment }
        ]);
    }
    create(value?: PartialMessage<UpdateEnvironmentResponse>): UpdateEnvironmentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateEnvironmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEnvironmentResponse): UpdateEnvironmentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Environment environment */ 1:
                    message.environment = Environment.internalBinaryRead(reader, reader.uint32(), options, message.environment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateEnvironmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Environment environment = 1; */
        if (message.environment)
            Environment.internalBinaryWrite(message.environment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateEnvironmentResponse
 */
export const UpdateEnvironmentResponse = new UpdateEnvironmentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteEnvironmentRequest$Type extends MessageType<DeleteEnvironmentRequest> {
    constructor() {
        super("environment_manager.DeleteEnvironmentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteEnvironmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteEnvironmentRequest): DeleteEnvironmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteEnvironmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteEnvironmentRequest
 */
export const DeleteEnvironmentRequest = new DeleteEnvironmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteEnvironmentResponse$Type extends MessageType<DeleteEnvironmentResponse> {
    constructor() {
        super("environment_manager.DeleteEnvironmentResponse", []);
    }
    create(value?: PartialMessage<DeleteEnvironmentResponse>): DeleteEnvironmentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteEnvironmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteEnvironmentResponse): DeleteEnvironmentResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteEnvironmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteEnvironmentResponse
 */
export const DeleteEnvironmentResponse = new DeleteEnvironmentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVariableRequest$Type extends MessageType<CreateVariableRequest> {
    constructor() {
        super("environment_manager.CreateVariableRequest", [
            { no: 1, name: "variable", kind: "message", T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<CreateVariableRequest>): CreateVariableRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateVariableRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVariableRequest): CreateVariableRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Variable variable */ 1:
                    message.variable = Variable.internalBinaryRead(reader, reader.uint32(), options, message.variable);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVariableRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Variable variable = 1; */
        if (message.variable)
            Variable.internalBinaryWrite(message.variable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.CreateVariableRequest
 */
export const CreateVariableRequest = new CreateVariableRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVariableResponse$Type extends MessageType<CreateVariableResponse> {
    constructor() {
        super("environment_manager.CreateVariableResponse", [
            { no: 1, name: "variable", kind: "message", T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<CreateVariableResponse>): CreateVariableResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateVariableResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVariableResponse): CreateVariableResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Variable variable */ 1:
                    message.variable = Variable.internalBinaryRead(reader, reader.uint32(), options, message.variable);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVariableResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Variable variable = 1; */
        if (message.variable)
            Variable.internalBinaryWrite(message.variable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.CreateVariableResponse
 */
export const CreateVariableResponse = new CreateVariableResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOneVariableRequest$Type extends MessageType<GetOneVariableRequest> {
    constructor() {
        super("environment_manager.GetOneVariableRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOneVariableRequest>): GetOneVariableRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOneVariableRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneVariableRequest): GetOneVariableRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneVariableRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetOneVariableRequest
 */
export const GetOneVariableRequest = new GetOneVariableRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOneVariableResponse$Type extends MessageType<GetOneVariableResponse> {
    constructor() {
        super("environment_manager.GetOneVariableResponse", [
            { no: 1, name: "variable", kind: "message", T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<GetOneVariableResponse>): GetOneVariableResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOneVariableResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneVariableResponse): GetOneVariableResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Variable variable */ 1:
                    message.variable = Variable.internalBinaryRead(reader, reader.uint32(), options, message.variable);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneVariableResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Variable variable = 1; */
        if (message.variable)
            Variable.internalBinaryWrite(message.variable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.GetOneVariableResponse
 */
export const GetOneVariableResponse = new GetOneVariableResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVariablesRequest$Type extends MessageType<QueryVariablesRequest> {
    constructor() {
        super("environment_manager.QueryVariablesRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "environment_kind", kind: "enum", oneof: "query", T: () => ["environment_manager.Environment.Kind", Environment_Kind] },
            { no: 3, name: "environment_id", kind: "scalar", oneof: "query", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryVariablesRequest>): QueryVariablesRequest {
        const message = { projectId: "", query: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVariablesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVariablesRequest): QueryVariablesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* environment_manager.Environment.Kind environment_kind */ 2:
                    message.query = {
                        oneofKind: "environmentKind",
                        environmentKind: reader.int32()
                    };
                    break;
                case /* string environment_id */ 3:
                    message.query = {
                        oneofKind: "environmentId",
                        environmentId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVariablesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* environment_manager.Environment.Kind environment_kind = 2; */
        if (message.query.oneofKind === "environmentKind")
            writer.tag(2, WireType.Varint).int32(message.query.environmentKind);
        /* string environment_id = 3; */
        if (message.query.oneofKind === "environmentId")
            writer.tag(3, WireType.LengthDelimited).string(message.query.environmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.QueryVariablesRequest
 */
export const QueryVariablesRequest = new QueryVariablesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVariablesResponse$Type extends MessageType<QueryVariablesResponse> {
    constructor() {
        super("environment_manager.QueryVariablesResponse", [
            { no: 1, name: "variables", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<QueryVariablesResponse>): QueryVariablesResponse {
        const message = { variables: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVariablesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVariablesResponse): QueryVariablesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated environment_manager.Variable variables */ 1:
                    message.variables.push(Variable.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVariablesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated environment_manager.Variable variables = 1; */
        for (let i = 0; i < message.variables.length; i++)
            Variable.internalBinaryWrite(message.variables[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.QueryVariablesResponse
 */
export const QueryVariablesResponse = new QueryVariablesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVariableRequest$Type extends MessageType<UpdateVariableRequest> {
    constructor() {
        super("environment_manager.UpdateVariableRequest", [
            { no: 1, name: "variable", kind: "message", T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<UpdateVariableRequest>): UpdateVariableRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateVariableRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVariableRequest): UpdateVariableRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Variable variable */ 1:
                    message.variable = Variable.internalBinaryRead(reader, reader.uint32(), options, message.variable);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVariableRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Variable variable = 1; */
        if (message.variable)
            Variable.internalBinaryWrite(message.variable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateVariableRequest
 */
export const UpdateVariableRequest = new UpdateVariableRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVariableResponse$Type extends MessageType<UpdateVariableResponse> {
    constructor() {
        super("environment_manager.UpdateVariableResponse", [
            { no: 1, name: "variable", kind: "message", T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<UpdateVariableResponse>): UpdateVariableResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateVariableResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVariableResponse): UpdateVariableResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* environment_manager.Variable variable */ 1:
                    message.variable = Variable.internalBinaryRead(reader, reader.uint32(), options, message.variable);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVariableResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* environment_manager.Variable variable = 1; */
        if (message.variable)
            Variable.internalBinaryWrite(message.variable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateVariableResponse
 */
export const UpdateVariableResponse = new UpdateVariableResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateManyVariablesRequest$Type extends MessageType<UpdateManyVariablesRequest> {
    constructor() {
        super("environment_manager.UpdateManyVariablesRequest", [
            { no: 1, name: "variable", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<UpdateManyVariablesRequest>): UpdateManyVariablesRequest {
        const message = { variable: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateManyVariablesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateManyVariablesRequest): UpdateManyVariablesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated environment_manager.Variable variable */ 1:
                    message.variable.push(Variable.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateManyVariablesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated environment_manager.Variable variable = 1; */
        for (let i = 0; i < message.variable.length; i++)
            Variable.internalBinaryWrite(message.variable[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateManyVariablesRequest
 */
export const UpdateManyVariablesRequest = new UpdateManyVariablesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateManyVariablesResponse$Type extends MessageType<UpdateManyVariablesResponse> {
    constructor() {
        super("environment_manager.UpdateManyVariablesResponse", [
            { no: 1, name: "variable", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Variable }
        ]);
    }
    create(value?: PartialMessage<UpdateManyVariablesResponse>): UpdateManyVariablesResponse {
        const message = { variable: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateManyVariablesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateManyVariablesResponse): UpdateManyVariablesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated environment_manager.Variable variable */ 1:
                    message.variable.push(Variable.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateManyVariablesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated environment_manager.Variable variable = 1; */
        for (let i = 0; i < message.variable.length; i++)
            Variable.internalBinaryWrite(message.variable[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.UpdateManyVariablesResponse
 */
export const UpdateManyVariablesResponse = new UpdateManyVariablesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteVariableRequest$Type extends MessageType<DeleteVariableRequest> {
    constructor() {
        super("environment_manager.DeleteVariableRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteVariableRequest>): DeleteVariableRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteVariableRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteVariableRequest): DeleteVariableRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteVariableRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteVariableRequest
 */
export const DeleteVariableRequest = new DeleteVariableRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteVariableResponse$Type extends MessageType<DeleteVariableResponse> {
    constructor() {
        super("environment_manager.DeleteVariableResponse", []);
    }
    create(value?: PartialMessage<DeleteVariableResponse>): DeleteVariableResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteVariableResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteVariableResponse): DeleteVariableResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteVariableResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteVariableResponse
 */
export const DeleteVariableResponse = new DeleteVariableResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteManyVariablesRequest$Type extends MessageType<DeleteManyVariablesRequest> {
    constructor() {
        super("environment_manager.DeleteManyVariablesRequest", [
            { no: 1, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteManyVariablesRequest>): DeleteManyVariablesRequest {
        const message = { ids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteManyVariablesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteManyVariablesRequest): DeleteManyVariablesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ids */ 1:
                    message.ids.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteManyVariablesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ids = 1; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.ids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteManyVariablesRequest
 */
export const DeleteManyVariablesRequest = new DeleteManyVariablesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteManyVariablesResponse$Type extends MessageType<DeleteManyVariablesResponse> {
    constructor() {
        super("environment_manager.DeleteManyVariablesResponse", []);
    }
    create(value?: PartialMessage<DeleteManyVariablesResponse>): DeleteManyVariablesResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteManyVariablesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteManyVariablesResponse): DeleteManyVariablesResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteManyVariablesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message environment_manager.DeleteManyVariablesResponse
 */
export const DeleteManyVariablesResponse = new DeleteManyVariablesResponse$Type();
/**
 * @generated ServiceType for protobuf service environment_manager.EnvironmentManager
 */
export const EnvironmentManager = new ServiceType("environment_manager.EnvironmentManager", [
    { name: "CreateProject", options: {}, I: CreateProjectRequest, O: CreateProjectResponse },
    { name: "GetOneProject", options: {}, I: GetOneProjectRequest, O: GetOneProjectResponse },
    { name: "GetAllProjects", options: {}, I: GetAllProjectsRequest, O: GetAllProjectsResponse },
    { name: "UpdateProject", options: {}, I: UpdateProjectRequest, O: UpdateProjectResponse },
    { name: "DeleteProject", options: {}, I: DeleteProjectRequest, O: DeleteProjectResponse },
    { name: "CreateEnvironment", options: {}, I: CreateEnvironmentRequest, O: CreateEnvironmentResponse },
    { name: "GetOneEnvironemnt", options: {}, I: GetOneEnvironmentRequest, O: GetOneEnvironmentResponse },
    { name: "GetAllEnvironments", options: {}, I: GetAllEnvironmentsRequest, O: GetAllEnvironmentsResponse },
    { name: "UpdateEnvironment", options: {}, I: UpdateEnvironmentRequest, O: UpdateEnvironmentResponse },
    { name: "DeleteEnvironment", options: {}, I: DeleteEnvironmentRequest, O: DeleteEnvironmentResponse },
    { name: "CreateVariable", options: {}, I: CreateVariableRequest, O: CreateVariableResponse },
    { name: "GetOneVariable", options: {}, I: GetOneVariableRequest, O: GetOneVariableResponse },
    { name: "QueryVariables", options: {}, I: QueryVariablesRequest, O: QueryVariablesResponse },
    { name: "UpdateVariable", options: {}, I: UpdateVariableRequest, O: UpdateVariableResponse },
    { name: "UpdateManyVariables", options: {}, I: UpdateManyVariablesRequest, O: UpdateManyVariablesResponse },
    { name: "DeleteVariable", options: {}, I: DeleteVariableRequest, O: DeleteVariableResponse },
    { name: "DeleteManyVariables", options: {}, I: DeleteManyVariablesRequest, O: DeleteManyVariablesResponse }
]);
