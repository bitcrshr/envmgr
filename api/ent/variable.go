// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bitcrshr/envmgr/api/ent/environment"
	"github.com/bitcrshr/envmgr/api/ent/variable"
	"github.com/google/uuid"
)

// Variable is the model entity for the Variable schema.
type Variable struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VariableQuery when eager-loading is set.
	Edges            VariableEdges `json:"edges"`
	environment_vars *uuid.UUID
	selectValues     sql.SelectValues
}

// VariableEdges holds the relations/edges for other nodes in the graph.
type VariableEdges struct {
	// Environment holds the value of the environment edge.
	Environment *Environment `json:"environment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VariableEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[0] {
		if e.Environment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "environment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Variable) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case variable.FieldKey, variable.FieldValue:
			values[i] = new(sql.NullString)
		case variable.FieldID:
			values[i] = new(uuid.UUID)
		case variable.ForeignKeys[0]: // environment_vars
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Variable fields.
func (v *Variable) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case variable.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case variable.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				v.Key = value.String
			}
		case variable.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				v.Value = value.String
			}
		case variable.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field environment_vars", values[i])
			} else if value.Valid {
				v.environment_vars = new(uuid.UUID)
				*v.environment_vars = *value.S.(*uuid.UUID)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Variable.
// This includes values selected through modifiers, order, etc.
func (v *Variable) GetValue(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryEnvironment queries the "environment" edge of the Variable entity.
func (v *Variable) QueryEnvironment() *EnvironmentQuery {
	return NewVariableClient(v.config).QueryEnvironment(v)
}

// Update returns a builder for updating this Variable.
// Note that you need to call Variable.Unwrap() before calling this method if this Variable
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Variable) Update() *VariableUpdateOne {
	return NewVariableClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Variable entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Variable) Unwrap() *Variable {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Variable is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Variable) String() string {
	var builder strings.Builder
	builder.WriteString("Variable(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("key=")
	builder.WriteString(v.Key)
	builder.WriteString(", ")
	builder.WriteString("value=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// Variables is a parsable slice of Variable.
type Variables []*Variable
