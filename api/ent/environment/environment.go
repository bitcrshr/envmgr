// Code generated by ent, DO NOT EDIT.

package environment

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bitcrshr/envmgr/api/ent/schema/gotype"
)

const (
	// Label holds the string label denoting the environment type in the database.
	Label = "environment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeVars holds the string denoting the vars edge name in mutations.
	EdgeVars = "vars"
	// Table holds the table name of the environment in the database.
	Table = "environments"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "environments"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_environments"
	// VarsTable is the table that holds the vars relation/edge.
	VarsTable = "variables"
	// VarsInverseTable is the table name for the Variable entity.
	// It exists in this package in order to avoid circular dependency with the "variable" package.
	VarsInverseTable = "variables"
	// VarsColumn is the table column denoting the vars relation/edge.
	VarsColumn = "environment_vars"
)

// Columns holds all SQL columns for environment fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldKind,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "environments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_environments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k gotype.EnvironmentKind) error {
	switch k {
	case "UNSPECIFIED", "DEVELOPMENT", "STAGING", "PRODUCTION":
		return nil
	default:
		return fmt.Errorf("environment: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the Environment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByVarsCount orders the results by vars count.
func ByVarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVarsStep(), opts...)
	}
}

// ByVars orders the results by vars terms.
func ByVars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newVarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VarsTable, VarsColumn),
	)
}
