// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bitcrshr/envmgr/api/ent/environment"
	"github.com/bitcrshr/envmgr/api/ent/project"
	"github.com/bitcrshr/envmgr/api/ent/schema/gotype"
	"github.com/bitcrshr/envmgr/api/ent/variable"
	"github.com/google/uuid"
)

// EnvironmentCreate is the builder for creating a Environment entity.
type EnvironmentCreate struct {
	config
	mutation *EnvironmentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *EnvironmentCreate) SetName(s string) *EnvironmentCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetKind sets the "kind" field.
func (ec *EnvironmentCreate) SetKind(gk gotype.EnvironmentKind) *EnvironmentCreate {
	ec.mutation.SetKind(gk)
	return ec
}

// SetID sets the "id" field.
func (ec *EnvironmentCreate) SetID(u uuid.UUID) *EnvironmentCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ec *EnvironmentCreate) SetProjectID(id uuid.UUID) *EnvironmentCreate {
	ec.mutation.SetProjectID(id)
	return ec
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ec *EnvironmentCreate) SetNillableProjectID(id *uuid.UUID) *EnvironmentCreate {
	if id != nil {
		ec = ec.SetProjectID(*id)
	}
	return ec
}

// SetProject sets the "project" edge to the Project entity.
func (ec *EnvironmentCreate) SetProject(p *Project) *EnvironmentCreate {
	return ec.SetProjectID(p.ID)
}

// AddVarIDs adds the "vars" edge to the Variable entity by IDs.
func (ec *EnvironmentCreate) AddVarIDs(ids ...uuid.UUID) *EnvironmentCreate {
	ec.mutation.AddVarIDs(ids...)
	return ec
}

// AddVars adds the "vars" edges to the Variable entity.
func (ec *EnvironmentCreate) AddVars(v ...*Variable) *EnvironmentCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ec.AddVarIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (ec *EnvironmentCreate) Mutation() *EnvironmentMutation {
	return ec.mutation
}

// Save creates the Environment in the database.
func (ec *EnvironmentCreate) Save(ctx context.Context) (*Environment, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EnvironmentCreate) SaveX(ctx context.Context) *Environment {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EnvironmentCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EnvironmentCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EnvironmentCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Environment.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := environment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Environment.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Environment.kind"`)}
	}
	if v, ok := ec.mutation.Kind(); ok {
		if err := environment.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Environment.kind": %w`, err)}
		}
	}
	return nil
}

func (ec *EnvironmentCreate) sqlSave(ctx context.Context) (*Environment, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EnvironmentCreate) createSpec() (*Environment, *sqlgraph.CreateSpec) {
	var (
		_node = &Environment{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(environment.Table, sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(environment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Kind(); ok {
		_spec.SetField(environment.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if nodes := ec.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   environment.ProjectTable,
			Columns: []string{environment.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_environments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.VarsTable,
			Columns: []string{environment.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(variable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EnvironmentCreateBulk is the builder for creating many Environment entities in bulk.
type EnvironmentCreateBulk struct {
	config
	builders []*EnvironmentCreate
}

// Save creates the Environment entities in the database.
func (ecb *EnvironmentCreateBulk) Save(ctx context.Context) ([]*Environment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Environment, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnvironmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EnvironmentCreateBulk) SaveX(ctx context.Context) []*Environment {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EnvironmentCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EnvironmentCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
