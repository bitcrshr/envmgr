// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bitcrshr/envmgr/api/ent/environment"
	"github.com/bitcrshr/envmgr/api/ent/variable"
	"github.com/google/uuid"
)

// VariableCreate is the builder for creating a Variable entity.
type VariableCreate struct {
	config
	mutation *VariableMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (vc *VariableCreate) SetKey(s string) *VariableCreate {
	vc.mutation.SetKey(s)
	return vc
}

// SetValue sets the "value" field.
func (vc *VariableCreate) SetValue(s string) *VariableCreate {
	vc.mutation.SetValue(s)
	return vc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (vc *VariableCreate) SetNillableValue(s *string) *VariableCreate {
	if s != nil {
		vc.SetValue(*s)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VariableCreate) SetID(u uuid.UUID) *VariableCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetEnvironmentID sets the "environment" edge to the Environment entity by ID.
func (vc *VariableCreate) SetEnvironmentID(id uuid.UUID) *VariableCreate {
	vc.mutation.SetEnvironmentID(id)
	return vc
}

// SetNillableEnvironmentID sets the "environment" edge to the Environment entity by ID if the given value is not nil.
func (vc *VariableCreate) SetNillableEnvironmentID(id *uuid.UUID) *VariableCreate {
	if id != nil {
		vc = vc.SetEnvironmentID(*id)
	}
	return vc
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (vc *VariableCreate) SetEnvironment(e *Environment) *VariableCreate {
	return vc.SetEnvironmentID(e.ID)
}

// Mutation returns the VariableMutation object of the builder.
func (vc *VariableCreate) Mutation() *VariableMutation {
	return vc.mutation
}

// Save creates the Variable in the database.
func (vc *VariableCreate) Save(ctx context.Context) (*Variable, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VariableCreate) SaveX(ctx context.Context) *Variable {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VariableCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VariableCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VariableCreate) defaults() {
	if _, ok := vc.mutation.Value(); !ok {
		v := variable.DefaultValue
		vc.mutation.SetValue(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VariableCreate) check() error {
	if _, ok := vc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Variable.key"`)}
	}
	if v, ok := vc.mutation.Key(); ok {
		if err := variable.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Variable.key": %w`, err)}
		}
	}
	return nil
}

func (vc *VariableCreate) sqlSave(ctx context.Context) (*Variable, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VariableCreate) createSpec() (*Variable, *sqlgraph.CreateSpec) {
	var (
		_node = &Variable{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(variable.Table, sqlgraph.NewFieldSpec(variable.FieldID, field.TypeUUID))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.Key(); ok {
		_spec.SetField(variable.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := vc.mutation.Value(); ok {
		_spec.SetField(variable.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := vc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.EnvironmentTable,
			Columns: []string{variable.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.environment_vars = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VariableCreateBulk is the builder for creating many Variable entities in bulk.
type VariableCreateBulk struct {
	config
	builders []*VariableCreate
}

// Save creates the Variable entities in the database.
func (vcb *VariableCreateBulk) Save(ctx context.Context) ([]*Variable, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Variable, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VariableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VariableCreateBulk) SaveX(ctx context.Context) []*Variable {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VariableCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VariableCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
