// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: environment_manager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnvironmentManagerClient is the client API for EnvironmentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentManagerClient interface {
	// project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	GetOneProject(ctx context.Context, in *GetOneProjectRequest, opts ...grpc.CallOption) (*GetOneProjectResponse, error)
	GetAllProjects(ctx context.Context, in *GetAllProjectsRequest, opts ...grpc.CallOption) (*GetAllProjectsResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// environment
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error)
	GetOneEnvironemnt(ctx context.Context, in *GetOneEnvironmentRequest, opts ...grpc.CallOption) (*GetOneEnvironmentResponse, error)
	GetAllEnvironments(ctx context.Context, in *GetAllEnvironmentsRequest, opts ...grpc.CallOption) (*GetAllEnvironmentsResponse, error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error)
	// variable
	CreateVariable(ctx context.Context, in *CreateVariableRequest, opts ...grpc.CallOption) (*CreateVariableResponse, error)
	GetOneVariable(ctx context.Context, in *GetOneVariableRequest, opts ...grpc.CallOption) (*GetOneVariableResponse, error)
	QueryVariables(ctx context.Context, in *QueryVariablesRequest, opts ...grpc.CallOption) (*QueryVariablesResponse, error)
	UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*UpdateVariableResponse, error)
	UpdateManyVariables(ctx context.Context, in *UpdateManyVariablesRequest, opts ...grpc.CallOption) (*UpdateManyVariablesResponse, error)
	DeleteVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*DeleteVariableResponse, error)
	DeleteManyVariables(ctx context.Context, in *DeleteManyVariablesRequest, opts ...grpc.CallOption) (*DeleteManyVariablesResponse, error)
}

type environmentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentManagerClient(cc grpc.ClientConnInterface) EnvironmentManagerClient {
	return &environmentManagerClient{cc}
}

func (c *environmentManagerClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) GetOneProject(ctx context.Context, in *GetOneProjectRequest, opts ...grpc.CallOption) (*GetOneProjectResponse, error) {
	out := new(GetOneProjectResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/GetOneProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) GetAllProjects(ctx context.Context, in *GetAllProjectsRequest, opts ...grpc.CallOption) (*GetAllProjectsResponse, error) {
	out := new(GetAllProjectsResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/GetAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error) {
	out := new(CreateEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) GetOneEnvironemnt(ctx context.Context, in *GetOneEnvironmentRequest, opts ...grpc.CallOption) (*GetOneEnvironmentResponse, error) {
	out := new(GetOneEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/GetOneEnvironemnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) GetAllEnvironments(ctx context.Context, in *GetAllEnvironmentsRequest, opts ...grpc.CallOption) (*GetAllEnvironmentsResponse, error) {
	out := new(GetAllEnvironmentsResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/GetAllEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error) {
	out := new(UpdateEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/UpdateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error) {
	out := new(DeleteEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) CreateVariable(ctx context.Context, in *CreateVariableRequest, opts ...grpc.CallOption) (*CreateVariableResponse, error) {
	out := new(CreateVariableResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/CreateVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) GetOneVariable(ctx context.Context, in *GetOneVariableRequest, opts ...grpc.CallOption) (*GetOneVariableResponse, error) {
	out := new(GetOneVariableResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/GetOneVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) QueryVariables(ctx context.Context, in *QueryVariablesRequest, opts ...grpc.CallOption) (*QueryVariablesResponse, error) {
	out := new(QueryVariablesResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/QueryVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*UpdateVariableResponse, error) {
	out := new(UpdateVariableResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/UpdateVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) UpdateManyVariables(ctx context.Context, in *UpdateManyVariablesRequest, opts ...grpc.CallOption) (*UpdateManyVariablesResponse, error) {
	out := new(UpdateManyVariablesResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/UpdateManyVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) DeleteVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*DeleteVariableResponse, error) {
	out := new(DeleteVariableResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/DeleteVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagerClient) DeleteManyVariables(ctx context.Context, in *DeleteManyVariablesRequest, opts ...grpc.CallOption) (*DeleteManyVariablesResponse, error) {
	out := new(DeleteManyVariablesResponse)
	err := c.cc.Invoke(ctx, "/environment_manager.EnvironmentManager/DeleteManyVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentManagerServer is the server API for EnvironmentManager service.
// All implementations must embed UnimplementedEnvironmentManagerServer
// for forward compatibility
type EnvironmentManagerServer interface {
	// project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	GetOneProject(context.Context, *GetOneProjectRequest) (*GetOneProjectResponse, error)
	GetAllProjects(context.Context, *GetAllProjectsRequest) (*GetAllProjectsResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// environment
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error)
	GetOneEnvironemnt(context.Context, *GetOneEnvironmentRequest) (*GetOneEnvironmentResponse, error)
	GetAllEnvironments(context.Context, *GetAllEnvironmentsRequest) (*GetAllEnvironmentsResponse, error)
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*UpdateEnvironmentResponse, error)
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*DeleteEnvironmentResponse, error)
	// variable
	CreateVariable(context.Context, *CreateVariableRequest) (*CreateVariableResponse, error)
	GetOneVariable(context.Context, *GetOneVariableRequest) (*GetOneVariableResponse, error)
	QueryVariables(context.Context, *QueryVariablesRequest) (*QueryVariablesResponse, error)
	UpdateVariable(context.Context, *UpdateVariableRequest) (*UpdateVariableResponse, error)
	UpdateManyVariables(context.Context, *UpdateManyVariablesRequest) (*UpdateManyVariablesResponse, error)
	DeleteVariable(context.Context, *DeleteVariableRequest) (*DeleteVariableResponse, error)
	DeleteManyVariables(context.Context, *DeleteManyVariablesRequest) (*DeleteManyVariablesResponse, error)
	mustEmbedUnimplementedEnvironmentManagerServer()
}

// UnimplementedEnvironmentManagerServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentManagerServer struct {
}

func (UnimplementedEnvironmentManagerServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedEnvironmentManagerServer) GetOneProject(context.Context, *GetOneProjectRequest) (*GetOneProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneProject not implemented")
}
func (UnimplementedEnvironmentManagerServer) GetAllProjects(context.Context, *GetAllProjectsRequest) (*GetAllProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProjects not implemented")
}
func (UnimplementedEnvironmentManagerServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedEnvironmentManagerServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedEnvironmentManagerServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedEnvironmentManagerServer) GetOneEnvironemnt(context.Context, *GetOneEnvironmentRequest) (*GetOneEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneEnvironemnt not implemented")
}
func (UnimplementedEnvironmentManagerServer) GetAllEnvironments(context.Context, *GetAllEnvironmentsRequest) (*GetAllEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEnvironments not implemented")
}
func (UnimplementedEnvironmentManagerServer) UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*UpdateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedEnvironmentManagerServer) DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*DeleteEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (UnimplementedEnvironmentManagerServer) CreateVariable(context.Context, *CreateVariableRequest) (*CreateVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariable not implemented")
}
func (UnimplementedEnvironmentManagerServer) GetOneVariable(context.Context, *GetOneVariableRequest) (*GetOneVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneVariable not implemented")
}
func (UnimplementedEnvironmentManagerServer) QueryVariables(context.Context, *QueryVariablesRequest) (*QueryVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVariables not implemented")
}
func (UnimplementedEnvironmentManagerServer) UpdateVariable(context.Context, *UpdateVariableRequest) (*UpdateVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariable not implemented")
}
func (UnimplementedEnvironmentManagerServer) UpdateManyVariables(context.Context, *UpdateManyVariablesRequest) (*UpdateManyVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManyVariables not implemented")
}
func (UnimplementedEnvironmentManagerServer) DeleteVariable(context.Context, *DeleteVariableRequest) (*DeleteVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariable not implemented")
}
func (UnimplementedEnvironmentManagerServer) DeleteManyVariables(context.Context, *DeleteManyVariablesRequest) (*DeleteManyVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManyVariables not implemented")
}
func (UnimplementedEnvironmentManagerServer) mustEmbedUnimplementedEnvironmentManagerServer() {}

// UnsafeEnvironmentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentManagerServer will
// result in compilation errors.
type UnsafeEnvironmentManagerServer interface {
	mustEmbedUnimplementedEnvironmentManagerServer()
}

func RegisterEnvironmentManagerServer(s grpc.ServiceRegistrar, srv EnvironmentManagerServer) {
	s.RegisterService(&EnvironmentManager_ServiceDesc, srv)
}

func _EnvironmentManager_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_GetOneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).GetOneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/GetOneProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).GetOneProject(ctx, req.(*GetOneProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_GetAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).GetAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/GetAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).GetAllProjects(ctx, req.(*GetAllProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_GetOneEnvironemnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).GetOneEnvironemnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/GetOneEnvironemnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).GetOneEnvironemnt(ctx, req.(*GetOneEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_GetAllEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).GetAllEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/GetAllEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).GetAllEnvironments(ctx, req.(*GetAllEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/UpdateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).UpdateEnvironment(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/CreateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).CreateVariable(ctx, req.(*CreateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_GetOneVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).GetOneVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/GetOneVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).GetOneVariable(ctx, req.(*GetOneVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_QueryVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).QueryVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/QueryVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).QueryVariables(ctx, req.(*QueryVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/UpdateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).UpdateVariable(ctx, req.(*UpdateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_UpdateManyVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManyVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).UpdateManyVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/UpdateManyVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).UpdateManyVariables(ctx, req.(*UpdateManyVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/DeleteVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).DeleteVariable(ctx, req.(*DeleteVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentManager_DeleteManyVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentManagerServer).DeleteManyVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment_manager.EnvironmentManager/DeleteManyVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentManagerServer).DeleteManyVariables(ctx, req.(*DeleteManyVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentManager_ServiceDesc is the grpc.ServiceDesc for EnvironmentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "environment_manager.EnvironmentManager",
	HandlerType: (*EnvironmentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _EnvironmentManager_CreateProject_Handler,
		},
		{
			MethodName: "GetOneProject",
			Handler:    _EnvironmentManager_GetOneProject_Handler,
		},
		{
			MethodName: "GetAllProjects",
			Handler:    _EnvironmentManager_GetAllProjects_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _EnvironmentManager_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _EnvironmentManager_DeleteProject_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _EnvironmentManager_CreateEnvironment_Handler,
		},
		{
			MethodName: "GetOneEnvironemnt",
			Handler:    _EnvironmentManager_GetOneEnvironemnt_Handler,
		},
		{
			MethodName: "GetAllEnvironments",
			Handler:    _EnvironmentManager_GetAllEnvironments_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _EnvironmentManager_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _EnvironmentManager_DeleteEnvironment_Handler,
		},
		{
			MethodName: "CreateVariable",
			Handler:    _EnvironmentManager_CreateVariable_Handler,
		},
		{
			MethodName: "GetOneVariable",
			Handler:    _EnvironmentManager_GetOneVariable_Handler,
		},
		{
			MethodName: "QueryVariables",
			Handler:    _EnvironmentManager_QueryVariables_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _EnvironmentManager_UpdateVariable_Handler,
		},
		{
			MethodName: "UpdateManyVariables",
			Handler:    _EnvironmentManager_UpdateManyVariables_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _EnvironmentManager_DeleteVariable_Handler,
		},
		{
			MethodName: "DeleteManyVariables",
			Handler:    _EnvironmentManager_DeleteManyVariables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "environment_manager.proto",
}
