// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "environment_manager.proto" (package "environment_manager", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EnvironmentManager } from "./environment_manager";
import type { DeleteManyVariablesResponse } from "./environment_manager";
import type { DeleteManyVariablesRequest } from "./environment_manager";
import type { DeleteVariableResponse } from "./environment_manager";
import type { DeleteVariableRequest } from "./environment_manager";
import type { UpdateManyVariablesResponse } from "./environment_manager";
import type { UpdateManyVariablesRequest } from "./environment_manager";
import type { UpdateVariableResponse } from "./environment_manager";
import type { UpdateVariableRequest } from "./environment_manager";
import type { QueryVariablesResponse } from "./environment_manager";
import type { QueryVariablesRequest } from "./environment_manager";
import type { GetOneVariableResponse } from "./environment_manager";
import type { GetOneVariableRequest } from "./environment_manager";
import type { CreateVariableResponse } from "./environment_manager";
import type { CreateVariableRequest } from "./environment_manager";
import type { DeleteEnvironmentResponse } from "./environment_manager";
import type { DeleteEnvironmentRequest } from "./environment_manager";
import type { UpdateEnvironmentResponse } from "./environment_manager";
import type { UpdateEnvironmentRequest } from "./environment_manager";
import type { GetAllEnvironmentsResponse } from "./environment_manager";
import type { GetAllEnvironmentsRequest } from "./environment_manager";
import type { GetOneEnvironmentResponse } from "./environment_manager";
import type { GetOneEnvironmentRequest } from "./environment_manager";
import type { CreateEnvironmentResponse } from "./environment_manager";
import type { CreateEnvironmentRequest } from "./environment_manager";
import type { DeleteProjectResponse } from "./environment_manager";
import type { DeleteProjectRequest } from "./environment_manager";
import type { UpdateProjectResponse } from "./environment_manager";
import type { UpdateProjectRequest } from "./environment_manager";
import type { GetAllProjectsResponse } from "./environment_manager";
import type { GetAllProjectsRequest } from "./environment_manager";
import type { GetOneProjectResponse } from "./environment_manager";
import type { GetOneProjectRequest } from "./environment_manager";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateProjectResponse } from "./environment_manager";
import type { CreateProjectRequest } from "./environment_manager";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service environment_manager.EnvironmentManager
 */
export interface IEnvironmentManagerClient {
    /**
     * project
     *
     * @generated from protobuf rpc: CreateProject(environment_manager.CreateProjectRequest) returns (environment_manager.CreateProjectResponse);
     */
    createProject(input: CreateProjectRequest, options?: RpcOptions): UnaryCall<CreateProjectRequest, CreateProjectResponse>;
    /**
     * @generated from protobuf rpc: GetOneProject(environment_manager.GetOneProjectRequest) returns (environment_manager.GetOneProjectResponse);
     */
    getOneProject(input: GetOneProjectRequest, options?: RpcOptions): UnaryCall<GetOneProjectRequest, GetOneProjectResponse>;
    /**
     * @generated from protobuf rpc: GetAllProjects(environment_manager.GetAllProjectsRequest) returns (environment_manager.GetAllProjectsResponse);
     */
    getAllProjects(input: GetAllProjectsRequest, options?: RpcOptions): UnaryCall<GetAllProjectsRequest, GetAllProjectsResponse>;
    /**
     * @generated from protobuf rpc: UpdateProject(environment_manager.UpdateProjectRequest) returns (environment_manager.UpdateProjectResponse);
     */
    updateProject(input: UpdateProjectRequest, options?: RpcOptions): UnaryCall<UpdateProjectRequest, UpdateProjectResponse>;
    /**
     * @generated from protobuf rpc: DeleteProject(environment_manager.DeleteProjectRequest) returns (environment_manager.DeleteProjectResponse);
     */
    deleteProject(input: DeleteProjectRequest, options?: RpcOptions): UnaryCall<DeleteProjectRequest, DeleteProjectResponse>;
    /**
     * environment
     *
     * @generated from protobuf rpc: CreateEnvironment(environment_manager.CreateEnvironmentRequest) returns (environment_manager.CreateEnvironmentResponse);
     */
    createEnvironment(input: CreateEnvironmentRequest, options?: RpcOptions): UnaryCall<CreateEnvironmentRequest, CreateEnvironmentResponse>;
    /**
     * @generated from protobuf rpc: GetOneEnvironemnt(environment_manager.GetOneEnvironmentRequest) returns (environment_manager.GetOneEnvironmentResponse);
     */
    getOneEnvironemnt(input: GetOneEnvironmentRequest, options?: RpcOptions): UnaryCall<GetOneEnvironmentRequest, GetOneEnvironmentResponse>;
    /**
     * @generated from protobuf rpc: GetAllEnvironments(environment_manager.GetAllEnvironmentsRequest) returns (environment_manager.GetAllEnvironmentsResponse);
     */
    getAllEnvironments(input: GetAllEnvironmentsRequest, options?: RpcOptions): UnaryCall<GetAllEnvironmentsRequest, GetAllEnvironmentsResponse>;
    /**
     * @generated from protobuf rpc: UpdateEnvironment(environment_manager.UpdateEnvironmentRequest) returns (environment_manager.UpdateEnvironmentResponse);
     */
    updateEnvironment(input: UpdateEnvironmentRequest, options?: RpcOptions): UnaryCall<UpdateEnvironmentRequest, UpdateEnvironmentResponse>;
    /**
     * @generated from protobuf rpc: DeleteEnvironment(environment_manager.DeleteEnvironmentRequest) returns (environment_manager.DeleteEnvironmentResponse);
     */
    deleteEnvironment(input: DeleteEnvironmentRequest, options?: RpcOptions): UnaryCall<DeleteEnvironmentRequest, DeleteEnvironmentResponse>;
    /**
     * variable
     *
     * @generated from protobuf rpc: CreateVariable(environment_manager.CreateVariableRequest) returns (environment_manager.CreateVariableResponse);
     */
    createVariable(input: CreateVariableRequest, options?: RpcOptions): UnaryCall<CreateVariableRequest, CreateVariableResponse>;
    /**
     * @generated from protobuf rpc: GetOneVariable(environment_manager.GetOneVariableRequest) returns (environment_manager.GetOneVariableResponse);
     */
    getOneVariable(input: GetOneVariableRequest, options?: RpcOptions): UnaryCall<GetOneVariableRequest, GetOneVariableResponse>;
    /**
     * @generated from protobuf rpc: QueryVariables(environment_manager.QueryVariablesRequest) returns (environment_manager.QueryVariablesResponse);
     */
    queryVariables(input: QueryVariablesRequest, options?: RpcOptions): UnaryCall<QueryVariablesRequest, QueryVariablesResponse>;
    /**
     * @generated from protobuf rpc: UpdateVariable(environment_manager.UpdateVariableRequest) returns (environment_manager.UpdateVariableResponse);
     */
    updateVariable(input: UpdateVariableRequest, options?: RpcOptions): UnaryCall<UpdateVariableRequest, UpdateVariableResponse>;
    /**
     * @generated from protobuf rpc: UpdateManyVariables(environment_manager.UpdateManyVariablesRequest) returns (environment_manager.UpdateManyVariablesResponse);
     */
    updateManyVariables(input: UpdateManyVariablesRequest, options?: RpcOptions): UnaryCall<UpdateManyVariablesRequest, UpdateManyVariablesResponse>;
    /**
     * @generated from protobuf rpc: DeleteVariable(environment_manager.DeleteVariableRequest) returns (environment_manager.DeleteVariableResponse);
     */
    deleteVariable(input: DeleteVariableRequest, options?: RpcOptions): UnaryCall<DeleteVariableRequest, DeleteVariableResponse>;
    /**
     * @generated from protobuf rpc: DeleteManyVariables(environment_manager.DeleteManyVariablesRequest) returns (environment_manager.DeleteManyVariablesResponse);
     */
    deleteManyVariables(input: DeleteManyVariablesRequest, options?: RpcOptions): UnaryCall<DeleteManyVariablesRequest, DeleteManyVariablesResponse>;
}
/**
 * @generated from protobuf service environment_manager.EnvironmentManager
 */
export class EnvironmentManagerClient implements IEnvironmentManagerClient, ServiceInfo {
    typeName = EnvironmentManager.typeName;
    methods = EnvironmentManager.methods;
    options = EnvironmentManager.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * project
     *
     * @generated from protobuf rpc: CreateProject(environment_manager.CreateProjectRequest) returns (environment_manager.CreateProjectResponse);
     */
    createProject(input: CreateProjectRequest, options?: RpcOptions): UnaryCall<CreateProjectRequest, CreateProjectResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateProjectRequest, CreateProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOneProject(environment_manager.GetOneProjectRequest) returns (environment_manager.GetOneProjectResponse);
     */
    getOneProject(input: GetOneProjectRequest, options?: RpcOptions): UnaryCall<GetOneProjectRequest, GetOneProjectResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOneProjectRequest, GetOneProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllProjects(environment_manager.GetAllProjectsRequest) returns (environment_manager.GetAllProjectsResponse);
     */
    getAllProjects(input: GetAllProjectsRequest, options?: RpcOptions): UnaryCall<GetAllProjectsRequest, GetAllProjectsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllProjectsRequest, GetAllProjectsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProject(environment_manager.UpdateProjectRequest) returns (environment_manager.UpdateProjectResponse);
     */
    updateProject(input: UpdateProjectRequest, options?: RpcOptions): UnaryCall<UpdateProjectRequest, UpdateProjectResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProjectRequest, UpdateProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteProject(environment_manager.DeleteProjectRequest) returns (environment_manager.DeleteProjectResponse);
     */
    deleteProject(input: DeleteProjectRequest, options?: RpcOptions): UnaryCall<DeleteProjectRequest, DeleteProjectResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteProjectRequest, DeleteProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * environment
     *
     * @generated from protobuf rpc: CreateEnvironment(environment_manager.CreateEnvironmentRequest) returns (environment_manager.CreateEnvironmentResponse);
     */
    createEnvironment(input: CreateEnvironmentRequest, options?: RpcOptions): UnaryCall<CreateEnvironmentRequest, CreateEnvironmentResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateEnvironmentRequest, CreateEnvironmentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOneEnvironemnt(environment_manager.GetOneEnvironmentRequest) returns (environment_manager.GetOneEnvironmentResponse);
     */
    getOneEnvironemnt(input: GetOneEnvironmentRequest, options?: RpcOptions): UnaryCall<GetOneEnvironmentRequest, GetOneEnvironmentResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOneEnvironmentRequest, GetOneEnvironmentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllEnvironments(environment_manager.GetAllEnvironmentsRequest) returns (environment_manager.GetAllEnvironmentsResponse);
     */
    getAllEnvironments(input: GetAllEnvironmentsRequest, options?: RpcOptions): UnaryCall<GetAllEnvironmentsRequest, GetAllEnvironmentsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllEnvironmentsRequest, GetAllEnvironmentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateEnvironment(environment_manager.UpdateEnvironmentRequest) returns (environment_manager.UpdateEnvironmentResponse);
     */
    updateEnvironment(input: UpdateEnvironmentRequest, options?: RpcOptions): UnaryCall<UpdateEnvironmentRequest, UpdateEnvironmentResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEnvironmentRequest, UpdateEnvironmentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteEnvironment(environment_manager.DeleteEnvironmentRequest) returns (environment_manager.DeleteEnvironmentResponse);
     */
    deleteEnvironment(input: DeleteEnvironmentRequest, options?: RpcOptions): UnaryCall<DeleteEnvironmentRequest, DeleteEnvironmentResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteEnvironmentRequest, DeleteEnvironmentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * variable
     *
     * @generated from protobuf rpc: CreateVariable(environment_manager.CreateVariableRequest) returns (environment_manager.CreateVariableResponse);
     */
    createVariable(input: CreateVariableRequest, options?: RpcOptions): UnaryCall<CreateVariableRequest, CreateVariableResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateVariableRequest, CreateVariableResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOneVariable(environment_manager.GetOneVariableRequest) returns (environment_manager.GetOneVariableResponse);
     */
    getOneVariable(input: GetOneVariableRequest, options?: RpcOptions): UnaryCall<GetOneVariableRequest, GetOneVariableResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOneVariableRequest, GetOneVariableResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: QueryVariables(environment_manager.QueryVariablesRequest) returns (environment_manager.QueryVariablesResponse);
     */
    queryVariables(input: QueryVariablesRequest, options?: RpcOptions): UnaryCall<QueryVariablesRequest, QueryVariablesResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryVariablesRequest, QueryVariablesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateVariable(environment_manager.UpdateVariableRequest) returns (environment_manager.UpdateVariableResponse);
     */
    updateVariable(input: UpdateVariableRequest, options?: RpcOptions): UnaryCall<UpdateVariableRequest, UpdateVariableResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateVariableRequest, UpdateVariableResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateManyVariables(environment_manager.UpdateManyVariablesRequest) returns (environment_manager.UpdateManyVariablesResponse);
     */
    updateManyVariables(input: UpdateManyVariablesRequest, options?: RpcOptions): UnaryCall<UpdateManyVariablesRequest, UpdateManyVariablesResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateManyVariablesRequest, UpdateManyVariablesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteVariable(environment_manager.DeleteVariableRequest) returns (environment_manager.DeleteVariableResponse);
     */
    deleteVariable(input: DeleteVariableRequest, options?: RpcOptions): UnaryCall<DeleteVariableRequest, DeleteVariableResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteVariableRequest, DeleteVariableResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteManyVariables(environment_manager.DeleteManyVariablesRequest) returns (environment_manager.DeleteManyVariablesResponse);
     */
    deleteManyVariables(input: DeleteManyVariablesRequest, options?: RpcOptions): UnaryCall<DeleteManyVariablesRequest, DeleteManyVariablesResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteManyVariablesRequest, DeleteManyVariablesResponse>("unary", this._transport, method, opt, input);
    }
}
